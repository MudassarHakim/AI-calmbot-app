#!pip install streamlit

import streamlit as st
from transformers import pipeline
import random

# Load the emotion classification model once
@st.cache_resource
def load_model():
    return pipeline("text-classification", model="j-hartmann/emotion-english-distilroberta-base", return_all_scores=False)

emotion_model = load_model()

# Response dictionary
dynamic_parts = {
    "bored": {
        "prefix": [
            "Feeling stuck or uninspired is okay.",
            "Boredom can be a gentle nudge for change.",
            "It's alright to feel a bit off or uninterested."
        ],
        "guidance": [
            "Try something playful â€” maybe doodle or dance to one song.",
            "How about starting a tiny project, even if itâ€™s silly?",
            "Call a friend or write down three weird ideas â€” just for fun.",
            "Even a small change of environment â€” like moving to a window â€” can shift things.",
            "Think of one thing youâ€™ve always wanted to try â€” maybe todayâ€™s the day to explore it!"
        ]
    },
    "anger": {
        "prefix": [
            "That sounds really frustrating.",
            "I hear your anger â€” it's valid.",
            "You're allowed to feel upset."
        ],
        "guidance": [
            "Let's pause for a slow breath together.",
            "Try unclenching your jaw and taking a breath.",
            "We donâ€™t need to fix it â€” just be with it a moment."
        ]
    },
    "sadness": {
        "prefix": [
            "That feels heavy, I can tell.",
            "You sound really down right now.",
            "Iâ€™m here with you â€” even in this quiet sadness."
        ],
        "guidance": [
            "Letâ€™s sit with this gently, no pressure to change it.",
            "Place a hand on your chest and just breathe with me.",
            "This feeling wonâ€™t last forever â€” but itâ€™s okay for now."
        ]
    },
    "fear": {
        "prefix": [
            "That sounds overwhelming.",
            "Itâ€™s okay to feel scared sometimes.",
            "Youâ€™re safe right now."
        ],
        "guidance": [
            "Letâ€™s ground you â€” feel your feet on the floor.",
            "Try a deep inhale through your noseâ€¦ and exhale.",
            "Name one thing you can see and one thing you can touch."
        ]
    },
    "joy": {
        "prefix": [
            "Thatâ€™s so wonderful to hear!",
            "Joy like this is a gift.",
            "I love that you're feeling this."
        ],
        "guidance": [
            "Take a moment to really soak it in.",
            "Letâ€™s breathe it in fully and smile.",
            "Celebrate it â€” you deserve that feeling."
        ]
    },
    "love": {
        "prefix": [
            "That connection sounds beautiful.",
            "Love is such a powerful feeling.",
            "That warmth youâ€™re feeling is precious."
        ],
        "guidance": [
            "Hold onto it and let it fill your chest.",
            "Just pause and feel it â€” it matters.",
            "Letâ€™s stay with that good feeling for a bit."
        ]
    },
    "surprise": {
        "prefix": [
            "That sounds unexpected.",
            "Wow â€” that probably caught you off guard.",
            "Thatâ€™s a lot to take in at once."
        ],
        "guidance": [
            "Letâ€™s take a breath and process slowly.",
            "You donâ€™t have to react right away.",
            "Pause for a moment â€” your body might need that."
        ]
    },
    "neutral": {
        "prefix": [
            "Thanks for checking in.",
            "Itâ€™s okay to just be in the moment.",
            "Iâ€™m here with you, no matter what."
        ],
        "guidance": [
            "Letâ€™s take a quiet breath anyway.",
            "Even stillness deserves attention.",
            "This pause can be a kind one."
        ]
    }
}

# Manual override for boredom detection
def detect_emotion_with_keywords(text):
    lowered = text.lower()

    # Ego triggers
    ego_keywords = [
        "ego", "pride", "arrogant", "disrespect", "self-respect",
        "how dare", "they should respect", "better than", "insulted",
        "humiliated", "undermined", "they think i'm stupid", "they don't value me"
    ]

    # Revenge triggers
    revenge_keywords = [
        "revenge", "get back", "retaliate", "hurt them", "make them pay",
        "teach them a lesson", "theyâ€™ll regret", "vengeful", "punish them",
        "karma will get", "payback", "settle the score"
    ]

    if any(kw in lowered for kw in revenge_keywords):
        return "revenge"
    if any(kw in lowered for kw in ego_keywords):
        return "ego"

    # Fallback to model
    try:
        emotion_result = emotion_model(text)[0]
        return emotion_result['label'].lower()
    except:
        return "neutral"



# Generate calm response
def generate_response(emotion):
    parts = dynamic_parts.get(emotion, dynamic_parts["neutral"])
    return f"{random.choice(parts['prefix'])} {random.choice(parts['guidance'])}"

# Web app layout
st.set_page_config(page_title="CalmBot+", page_icon="ðŸŒ¿")
st.title("ðŸŒ¿ CalmBot â€“ Your Emotional Support Companion")

user_input = st.text_input("Tell me how you're feeling right now:")

if user_input:
    emotion = detect_emotion_with_override(user_input)

    calm_reply = generate_response(emotion)

    st.markdown(f"**Detected Emotion:** `{emotion.capitalize()}`")
    st.success(calm_reply)
